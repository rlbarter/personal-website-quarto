{"title":"ggplot2: Mastering the basics","markdown":{"yaml":{"title":"ggplot2: Mastering the basics","author":"Rebecca Barter","categories":["R","visualization"],"format":{"html":{"toc":true,"toc-location":"left"}},"date":"2017-11-17","description":"Making graphs in R with ggplot2 is easy! This post will cover the basics to get you started on your ggplot2 adventures"},"headingText":"Useful resources for learning ggplot2","containsRefs":false,"markdown":"\n\nAn interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/ggplot2-thw. Feel free to download it and use for your own learning or teaching adventures!\n\n\n- **ggplot2** book (https://www.amazon.com/dp/0387981403/ref=cm_sw_su_dp?tag=ggplot2-20) by Hadley Wickham\n- **The layered grammar of graphics** (http://vita.had.co.nz/papers/layered-grammar.pdf) by Hadley Wickham\n\n## Materials outline\n\nI will begin by providing an overview of the layered grammar of graphics upon which ggplot2 is built. I will then teach ggplot2 by layering examples on top of one another. Finally, I will introduce some advanced topics such as faceting and themes\n\n1. Layered grammar of graphics\n\n1. Basic ggplot2 plot types\n\n1. Scales, axes, legends and positioning\n\n1. Faceting\n\n1. Themes: deviating from the defaults to produce beautiful graphics\n\nBy the end of this tutorial, you will be able to produce beautiful graphics such as this:\n\n```{r echo = FALSE, message=FALSE, warning=FALSE, fig.align=\"center\"}\nlibrary(ggplot2)\n# to download the data directly:\ngapminder <- read.csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv\")\n\n\nlibrary(dplyr)\ngapminder_2007 <- gapminder %>% filter(year == 2007)\n\nggplot(gapminder_2007) +\n  # add scatter points\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),\n             alpha = 0.5) +\n  # add some text annotations for the very large countries\n  geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),\n            color = \"grey50\",\n            data = filter(gapminder_2007, pop > 1000000000 | country %in% c(\"Nigeria\", \"United States\"))) +\n  # clean the axes names and breaks\n  scale_x_log10(limits = c(200, 60000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             # remove size legend\n             guide = \"none\") +\n  # add a nicer theme\n  theme_classic() +\n  # place legend at top and grey axis lines\n  theme(legend.position = \"top\",\n        axis.line = element_line(color = \"grey85\"),\n        axis.ticks = element_line(color = \"grey85\"))\n```\n\n\n\n## The layered grammar of graphics\n\nHadley Wickham built ggplot2 based on a set of principles outlines in his *layered grammar of graphics* (inspired by Wilkinson's original *grammar of graphics*). The basic idea is that a statistical graphic is a mapping from data to aesthetic attributes (such as colour, shape, and size) of geometric objects (such as points, lines, and bars).\n\nWe will use some of this terminology as we progress and discover that each piece of terminology corresponds to a type of object in ggplot2.\n\n- **data**: a data frame containing the variables that you want to visualize\n\n- **geoms**: geometric objects (circles, lines, text) that you will actually see\n\n- **aesthetics**: the mapping from the data to the geographic objects (e.g. by describing position, size, colour, etc)\n\n\n## Basic ggplot2\n\nIn this section, we are going to make our first plot. This plot will be based on the `gapminder` dataset that can be found [here](https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv). Below, we show the first 6 rows of the `gapminder` dataset.\n\n```{r}\nlibrary(ggplot2)\n# to download the data directly:\ngapminder <- read.csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv\")\n```\n\n```{r}\nhead(gapminder)\n```\n\n\nThe first function we will use is `ggplot()`. This function allows us to define the data that we will be using to make the plot, as well as the aesthetic properties that will be mapped to the geometric objects. That is, we will tell ggplot which data (a data frame) we are interested in and how each of the variables in our dataset will be used (e.g. as an x or y coordinate, as a coloring variable or a size variable, etc).\n    \n    \n    \nBelow, we define our first ggplot object using the `ggplot` function, with the gapminder dataset and the x and y aesthetics defined by the `gdpPercap` and `lifeExp` variables, respectively. \n\nThe output of this function is a grid with `gdpPercap` as the x-axis and `lifeExp` as the y-axis. However, we have not yet told ggplot what type of geometric object the data will be mapped to, so no data has been displayed.\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp))\n```\n\n### Aesthetic mapping to layers\n\nNext, we will add a \"geom\" layer to our ggplot object. For example, we could add a points layer which would automatically adopt the aesthetic mapping described in the previous line of code.\n\n\n```{r, fig.align=\"center\"}\n# describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +\n  # add a points layer on top\n  geom_point()\n```\n\nWhat we have done is map each country (row) in the data to a point in the space defined by the GDP and life expectancy value. The end result is an ugly blob of points. Fortunately, there are many things that we can do to make this blob of points prettier.\n\nFor example, we can change the transparency of all points by setting the alpha argument to a low value, changing the color of the points to be blue instead of black, and making the points smaller.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5, col = \"cornflowerblue\", size = 0.5)\n```\n\n\nNote that the above argument changed the alpha value and color for *all of the points at once*. \n\nOne of the truly powerful features of ggplot2 is the ability to change these aesthetics based on the data itself. For example, perhaps we want to color each point by its `continent`. Instead of separating the data into five different subsets (based on the possible values of continent), and adding the different colored points separately, we can simply add all the points once and add an colour aesthetic map for `continent`.\n\nNote that whenever we are using a variable from the data to describe an aesthetic property of a geom, this aesthetic property needs to be included in the `aes()` function.\n\n\n\n```{r}\nunique(gapminder$continent)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point(alpha = 0.5, size = 0.5)\n```\n\nWe could also add aesthetic mappings for other features such as shape, size, transparency (alpha), and more! For example, changing the size based on population:\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5)\n```\n\n### Types of layers\n\nSo far, we have only seen scatterplots (point geoms), however, there are many other geoms we could add, including:\n\n- lines\n\n- histograms\n\n- boxplots and violin plots\n\n- barplots\n\n- smoothed curves\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = year, y = lifeExp, group = country, color = continent)) +\n  geom_line(alpha = 0.5)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = continent, y = lifeExp, fill = continent)) +\n  geom_boxplot()\n```\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = lifeExp)) + \n  geom_histogram(binwidth = 3)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop)) +\n  geom_point(aes(color = continent), alpha = 0.5) +\n  geom_smooth(se = FALSE, method = \"loess\", color = \"grey30\")\n```\n\n## Scales\n\nWe are going to return to our original scatterplot example to discuss scales, legend and positioning. \n\nTo remind you, this scatterplot showed GDP per capita against life expectancy for each country colored by continent and sized by population.  \n\nTo keep things simple, let's filter to a single year.\n\n```{r message=FALSE}\nlibrary(dplyr)\ngapminder_2007 <- gapminder %>% filter(year == 2007)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5)\n```\n\nThe scale of a plot describes the features of the space in which it is plotted. Arguably, it would be better to show `gdpPercap` on a logarithmic scale, rather than in its raw form. Fortunately, this is easy to do using a `scale` function, which can be considered another layer that transforms our plot.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5) +\n  scale_x_log10()\n```\n\nThe default x- (and y-) axes scales are `scale_x_continuous` and `scale_y_continuous`, but other options include `scale_x_sqrt` and `scale_x_reverse`.\n\nEach of these scale functions has many options including changing the limits, the breaks, etc. For example in the plot below, we manipulate the x-axis by providing arguments to our `scale` function of choice.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5) +\n  # clean the x-axis breaks\n  scale_x_log10(breaks = c(1, 10, 100, 1000, 10000),\n                limits = c(1, 120000))\n```\n\nNotice that we changed the name of the x-axis in the plot using the `name` argument. This could also be done using the `labs` function. As an example, below we add a title and change the name of the y-axis and legends using the `labs` function.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\")\n```\n\nWe could also manipulate the scale of the size variable. Below, we expand the range of sizes and clean up the variable name. Since the variable we provided for size is a continuous variable (`pop`) we use the `scale_size_continuous` argument.\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation (millions)\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             breaks = 1000000 * c(250, 500, 750, 1000, 1250),\n             labels = c(\"250\", \"500\", \"750\", \"1000\", \"1250\")) \n```\n\nScales also exist for other aesthetic features such as `fill`, `color`, `alpha`, etc.\n\n## Faceting\n\nSometimes we want to be able to make multiple plots of the same thing across different categories. This can be achieved with minimal repetition using faceting.\n\nIn the example below, we will remake the plot above individually for each continent.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation (millions)\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             breaks = 1000000 * c(250, 500, 750, 1000, 1250),\n             labels = c(\"250\", \"500\", \"750\", \"1000\", \"1250\")) +\n  # add faceting\n  facet_wrap(~continent)\n\n```\n\n## Themes: making even more beautiful figures with ggplot2\n\nOne of the first things I usually do when I make a ggplot is edit the default theme. I actually really don't like the grey background, nor do I like having a grid unless it really helps with the plot interpretation.\n\nOne of the simplest themes is `theme_classic`, however there are several other themes to choose from. The `ggthemes` package offers many additional themes, but you could also make your own using the `theme()` function.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # clean the axes names and breaks\n  scale_x_log10(breaks = c(1000, 10000),\n                limits = c(200, 120000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation (millions)\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             breaks = 1000000 * c(250, 500, 750, 1000, 1250),\n             labels = c(\"250\", \"500\", \"750\", \"1000\", \"1250\")) +\n  # add a nicer theme\n  theme_classic(base_family = \"Avenir\")\n```\n\nAs an example of further customization of the ggplot theme, below we do the following:\n\n- move the legend to the top (set `legend.position = \"top\"` in `theme()`)\n- removing the population legend (set `guide = \"none\"` in `scale_size()`)\n- remove the axes lines (set `axis.line = element_blank()` in `theme()`)\n- add some text annotations (add `geom_text` layer)\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007) +\n  # add scatter points\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),\n             alpha = 0.5) +\n  # add some text annotations for the very large countries\n  geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),\n            color = \"grey50\",\n            data = filter(gapminder_2007, pop > 1000000000 | country %in% c(\"Nigeria\", \"United States\"))) +\n  # clean the axes names and breaks\n  scale_x_log10(limits = c(200, 60000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             # remove size legend\n             guide = \"none\") +\n  # add a nicer theme\n  theme_classic() +\n  # place legend at top and grey axis lines\n  theme(legend.position = \"top\",\n        axis.line = element_line(color = \"grey85\"),\n        axis.ticks = element_line(color = \"grey85\"))\n```\n\n\n## Saving your plots\n\nYou can save your plots using the `ggsave()` function.\n\n```{r eval = FALSE, fig.align=\"center\"}\np <- ggplot(gapminder_2007) +\n  # add scatter points\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),\n             alpha = 0.5) +\n  # add some text annotations for the very large countries\n  geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),\n            color = \"grey50\",\n            data = filter(gapminder_2007, pop > 1000000000 | country %in% c(\"Nigeria\", \"United States\"))) +\n  # clean the axes names and breaks\n  scale_x_log10(limits = c(200, 60000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             # remove size legend\n             guide = \"none\") +\n  # add a nicer theme\n  theme_classic() +\n  # place legend at top and grey axis lines\n  theme(legend.position = \"top\",\n        axis.line = element_line(color = \"grey85\"),\n        axis.ticks = element_line(color = \"grey85\"))\n\n# save the plot\nggsave(\"beautiful_plot.png\", p, dpi = 300, width = 6, height = 4)\n```","srcMarkdownNoYaml":"\n\nAn interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/ggplot2-thw. Feel free to download it and use for your own learning or teaching adventures!\n\n## Useful resources for learning ggplot2\n\n- **ggplot2** book (https://www.amazon.com/dp/0387981403/ref=cm_sw_su_dp?tag=ggplot2-20) by Hadley Wickham\n- **The layered grammar of graphics** (http://vita.had.co.nz/papers/layered-grammar.pdf) by Hadley Wickham\n\n## Materials outline\n\nI will begin by providing an overview of the layered grammar of graphics upon which ggplot2 is built. I will then teach ggplot2 by layering examples on top of one another. Finally, I will introduce some advanced topics such as faceting and themes\n\n1. Layered grammar of graphics\n\n1. Basic ggplot2 plot types\n\n1. Scales, axes, legends and positioning\n\n1. Faceting\n\n1. Themes: deviating from the defaults to produce beautiful graphics\n\nBy the end of this tutorial, you will be able to produce beautiful graphics such as this:\n\n```{r echo = FALSE, message=FALSE, warning=FALSE, fig.align=\"center\"}\nlibrary(ggplot2)\n# to download the data directly:\ngapminder <- read.csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv\")\n\n\nlibrary(dplyr)\ngapminder_2007 <- gapminder %>% filter(year == 2007)\n\nggplot(gapminder_2007) +\n  # add scatter points\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),\n             alpha = 0.5) +\n  # add some text annotations for the very large countries\n  geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),\n            color = \"grey50\",\n            data = filter(gapminder_2007, pop > 1000000000 | country %in% c(\"Nigeria\", \"United States\"))) +\n  # clean the axes names and breaks\n  scale_x_log10(limits = c(200, 60000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             # remove size legend\n             guide = \"none\") +\n  # add a nicer theme\n  theme_classic() +\n  # place legend at top and grey axis lines\n  theme(legend.position = \"top\",\n        axis.line = element_line(color = \"grey85\"),\n        axis.ticks = element_line(color = \"grey85\"))\n```\n\n\n\n## The layered grammar of graphics\n\nHadley Wickham built ggplot2 based on a set of principles outlines in his *layered grammar of graphics* (inspired by Wilkinson's original *grammar of graphics*). The basic idea is that a statistical graphic is a mapping from data to aesthetic attributes (such as colour, shape, and size) of geometric objects (such as points, lines, and bars).\n\nWe will use some of this terminology as we progress and discover that each piece of terminology corresponds to a type of object in ggplot2.\n\n- **data**: a data frame containing the variables that you want to visualize\n\n- **geoms**: geometric objects (circles, lines, text) that you will actually see\n\n- **aesthetics**: the mapping from the data to the geographic objects (e.g. by describing position, size, colour, etc)\n\n\n## Basic ggplot2\n\nIn this section, we are going to make our first plot. This plot will be based on the `gapminder` dataset that can be found [here](https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv). Below, we show the first 6 rows of the `gapminder` dataset.\n\n```{r}\nlibrary(ggplot2)\n# to download the data directly:\ngapminder <- read.csv(\"https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder-FiveYearData.csv\")\n```\n\n```{r}\nhead(gapminder)\n```\n\n\nThe first function we will use is `ggplot()`. This function allows us to define the data that we will be using to make the plot, as well as the aesthetic properties that will be mapped to the geometric objects. That is, we will tell ggplot which data (a data frame) we are interested in and how each of the variables in our dataset will be used (e.g. as an x or y coordinate, as a coloring variable or a size variable, etc).\n    \n    \n    \nBelow, we define our first ggplot object using the `ggplot` function, with the gapminder dataset and the x and y aesthetics defined by the `gdpPercap` and `lifeExp` variables, respectively. \n\nThe output of this function is a grid with `gdpPercap` as the x-axis and `lifeExp` as the y-axis. However, we have not yet told ggplot what type of geometric object the data will be mapped to, so no data has been displayed.\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp))\n```\n\n### Aesthetic mapping to layers\n\nNext, we will add a \"geom\" layer to our ggplot object. For example, we could add a points layer which would automatically adopt the aesthetic mapping described in the previous line of code.\n\n\n```{r, fig.align=\"center\"}\n# describe the base ggplot object and tell it what data we are interested in along with the aesthetic mapping\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +\n  # add a points layer on top\n  geom_point()\n```\n\nWhat we have done is map each country (row) in the data to a point in the space defined by the GDP and life expectancy value. The end result is an ugly blob of points. Fortunately, there are many things that we can do to make this blob of points prettier.\n\nFor example, we can change the transparency of all points by setting the alpha argument to a low value, changing the color of the points to be blue instead of black, and making the points smaller.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(alpha = 0.5, col = \"cornflowerblue\", size = 0.5)\n```\n\n\nNote that the above argument changed the alpha value and color for *all of the points at once*. \n\nOne of the truly powerful features of ggplot2 is the ability to change these aesthetics based on the data itself. For example, perhaps we want to color each point by its `continent`. Instead of separating the data into five different subsets (based on the possible values of continent), and adding the different colored points separately, we can simply add all the points once and add an colour aesthetic map for `continent`.\n\nNote that whenever we are using a variable from the data to describe an aesthetic property of a geom, this aesthetic property needs to be included in the `aes()` function.\n\n\n\n```{r}\nunique(gapminder$continent)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point(alpha = 0.5, size = 0.5)\n```\n\nWe could also add aesthetic mappings for other features such as shape, size, transparency (alpha), and more! For example, changing the size based on population:\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5)\n```\n\n### Types of layers\n\nSo far, we have only seen scatterplots (point geoms), however, there are many other geoms we could add, including:\n\n- lines\n\n- histograms\n\n- boxplots and violin plots\n\n- barplots\n\n- smoothed curves\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = year, y = lifeExp, group = country, color = continent)) +\n  geom_line(alpha = 0.5)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = continent, y = lifeExp, fill = continent)) +\n  geom_boxplot()\n```\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = lifeExp)) + \n  geom_histogram(binwidth = 3)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop)) +\n  geom_point(aes(color = continent), alpha = 0.5) +\n  geom_smooth(se = FALSE, method = \"loess\", color = \"grey30\")\n```\n\n## Scales\n\nWe are going to return to our original scatterplot example to discuss scales, legend and positioning. \n\nTo remind you, this scatterplot showed GDP per capita against life expectancy for each country colored by continent and sized by population.  \n\nTo keep things simple, let's filter to a single year.\n\n```{r message=FALSE}\nlibrary(dplyr)\ngapminder_2007 <- gapminder %>% filter(year == 2007)\n```\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5)\n```\n\nThe scale of a plot describes the features of the space in which it is plotted. Arguably, it would be better to show `gdpPercap` on a logarithmic scale, rather than in its raw form. Fortunately, this is easy to do using a `scale` function, which can be considered another layer that transforms our plot.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5) +\n  scale_x_log10()\n```\n\nThe default x- (and y-) axes scales are `scale_x_continuous` and `scale_y_continuous`, but other options include `scale_x_sqrt` and `scale_x_reverse`.\n\nEach of these scale functions has many options including changing the limits, the breaks, etc. For example in the plot below, we manipulate the x-axis by providing arguments to our `scale` function of choice.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  geom_point(alpha = 0.5) +\n  # clean the x-axis breaks\n  scale_x_log10(breaks = c(1, 10, 100, 1000, 10000),\n                limits = c(1, 120000))\n```\n\nNotice that we changed the name of the x-axis in the plot using the `name` argument. This could also be done using the `labs` function. As an example, below we add a title and change the name of the y-axis and legends using the `labs` function.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\")\n```\n\nWe could also manipulate the scale of the size variable. Below, we expand the range of sizes and clean up the variable name. Since the variable we provided for size is a continuous variable (`pop`) we use the `scale_size_continuous` argument.\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation (millions)\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             breaks = 1000000 * c(250, 500, 750, 1000, 1250),\n             labels = c(\"250\", \"500\", \"750\", \"1000\", \"1250\")) \n```\n\nScales also exist for other aesthetic features such as `fill`, `color`, `alpha`, etc.\n\n## Faceting\n\nSometimes we want to be able to make multiple plots of the same thing across different categories. This can be achieved with minimal repetition using faceting.\n\nIn the example below, we will remake the plot above individually for each continent.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # log-scale the x-axis\n  scale_x_log10() +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation (millions)\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             breaks = 1000000 * c(250, 500, 750, 1000, 1250),\n             labels = c(\"250\", \"500\", \"750\", \"1000\", \"1250\")) +\n  # add faceting\n  facet_wrap(~continent)\n\n```\n\n## Themes: making even more beautiful figures with ggplot2\n\nOne of the first things I usually do when I make a ggplot is edit the default theme. I actually really don't like the grey background, nor do I like having a grid unless it really helps with the plot interpretation.\n\nOne of the simplest themes is `theme_classic`, however there are several other themes to choose from. The `ggthemes` package offers many additional themes, but you could also make your own using the `theme()` function.\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +\n  # add scatter points\n  geom_point(alpha = 0.5) +\n  # clean the axes names and breaks\n  scale_x_log10(breaks = c(1000, 10000),\n                limits = c(200, 120000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation (millions)\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             breaks = 1000000 * c(250, 500, 750, 1000, 1250),\n             labels = c(\"250\", \"500\", \"750\", \"1000\", \"1250\")) +\n  # add a nicer theme\n  theme_classic(base_family = \"Avenir\")\n```\n\nAs an example of further customization of the ggplot theme, below we do the following:\n\n- move the legend to the top (set `legend.position = \"top\"` in `theme()`)\n- removing the population legend (set `guide = \"none\"` in `scale_size()`)\n- remove the axes lines (set `axis.line = element_blank()` in `theme()`)\n- add some text annotations (add `geom_text` layer)\n\n\n```{r, fig.align=\"center\"}\nggplot(gapminder_2007) +\n  # add scatter points\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),\n             alpha = 0.5) +\n  # add some text annotations for the very large countries\n  geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),\n            color = \"grey50\",\n            data = filter(gapminder_2007, pop > 1000000000 | country %in% c(\"Nigeria\", \"United States\"))) +\n  # clean the axes names and breaks\n  scale_x_log10(limits = c(200, 60000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             # remove size legend\n             guide = \"none\") +\n  # add a nicer theme\n  theme_classic() +\n  # place legend at top and grey axis lines\n  theme(legend.position = \"top\",\n        axis.line = element_line(color = \"grey85\"),\n        axis.ticks = element_line(color = \"grey85\"))\n```\n\n\n## Saving your plots\n\nYou can save your plots using the `ggsave()` function.\n\n```{r eval = FALSE, fig.align=\"center\"}\np <- ggplot(gapminder_2007) +\n  # add scatter points\n  geom_point(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop),\n             alpha = 0.5) +\n  # add some text annotations for the very large countries\n  geom_text(aes(x = gdpPercap, y = lifeExp + 3, label = country),\n            color = \"grey50\",\n            data = filter(gapminder_2007, pop > 1000000000 | country %in% c(\"Nigeria\", \"United States\"))) +\n  # clean the axes names and breaks\n  scale_x_log10(limits = c(200, 60000)) +\n  # change labels\n  labs(title = \"GDP versus life expectancy in 2007\",\n       x = \"GDP per capita (log scale)\",\n       y = \"Life expectancy\",\n       size = \"Popoulation\",\n       color = \"Continent\") +\n  # change the size scale\n  scale_size(range = c(0.1, 10),\n             # remove size legend\n             guide = \"none\") +\n  # add a nicer theme\n  theme_classic() +\n  # place legend at top and grey axis lines\n  theme(legend.position = \"top\",\n        axis.line = element_line(color = \"grey85\"),\n        axis.ticks = element_line(color = \"grey85\"))\n\n# save the plot\nggsave(\"beautiful_plot.png\", p, dpi = 300, width = 6, height = 4)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"2017-11-17-ggplot2_tutorial.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":"simplex","linkcolor":"#6633c4","code-copy":true,"footnotes-hover":true,"title-block-banner":true,"comments":{"utterances":{"repo":"rlbarter/blog_comments"}},"title":"ggplot2: Mastering the basics","author":"Rebecca Barter","categories":["R","visualization"],"date":"2017-11-17","description":"Making graphs in R with ggplot2 is easy! This post will cover the basics to get you started on your ggplot2 adventures","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}